import { Event } from "../types";
import { VoiceState } from "discord.js";
import { XPManager } from "../managers/xp-manager";
import { db } from "../database/connection";
import { levelConfig } from "../database/schema";
import { eq } from "drizzle-orm";
import levelConfigFile from "../config/levels";

const event: Event = {
  name: "voiceStateUpdate",
  execute: async (oldState: VoiceState, newState: VoiceState) => {
    // Ignoruj boty
    if (newState.member?.user.bot) return;

    const userId = newState.member?.id;
    const guildId = newState.guild.id;

    if (!userId) return;

    try {
      // Pobierz konfiguracjƒô serwera
      const configs = await db
        .select()
        .from(levelConfig)
        .where(eq(levelConfig.guildId, guildId))
        .limit(1);

      const config = configs[0];

      // Je≈õli system jest wy≈ÇƒÖczony, zako≈Ñcz
      if (config && !config.enabled) return;

      const xpManager = XPManager.getInstance();

      // Helper: sprawd≈∫ czy u≈ºytkownik jest aktywny (nie wyciszony)
      const isUserActive = (state: VoiceState): boolean => {
        // U≈ºytkownik NIE jest aktywny je≈õli:
        // - jest wyciszony przez serwer (serverMute)
        // - sam siƒô wyciszy≈Ç (selfMute)
        // - ma wy≈ÇƒÖczony d≈∫wiƒôk (serverDeaf)
        // - sam wy≈ÇƒÖczy≈Ç d≈∫wiƒôk (selfDeaf)
        return (
          !state.serverMute &&
          !state.selfMute &&
          !state.serverDeaf &&
          !state.selfDeaf
        );
      };

      // ========== U≈ªYTKOWNIK DO≈ÅƒÑCZY≈Å DO KANA≈ÅU ==========
      if (!oldState.channel && newState.channel) {
        const membersInChannel = newState.channel.members.filter(
          (m) => !m.user.bot
        ).size;

        console.log(
          `üé§ ${newState.member?.user.tag} do≈ÇƒÖczy≈Ç do VC (${membersInChannel} os√≥b)`
        );

        // Je≈õli jest wystarczajƒÖco os√≥b i u≈ºytkownik jest aktywny
        if (
          membersInChannel >= levelConfigFile.minVoiceMembers &&
          isUserActive(newState)
        ) {
          xpManager.setVoiceJoined(userId, guildId);
          console.log(
            `‚úÖ Rozpoczƒôto sesjƒô XP dla ${newState.member?.user.tag}`
          );

          // Je≈õli to druga osoba, aktywuj pierwszƒÖ (je≈õli jest aktywna)
          if (membersInChannel === levelConfigFile.minVoiceMembers) {
            for (const [memberId, member] of newState.channel.members) {
              if (
                !member.user.bot &&
                memberId !== userId &&
                member.voice.channel
              ) {
                if (isUserActive(member.voice)) {
                  xpManager.setVoiceJoined(memberId, guildId);
                  console.log(
                    `‚úÖ Rozpoczƒôto sesjƒô XP dla ${member.user.tag} (aktywacja minimum)`
                  );
                }
              }
            }
          }
        } else if (
          membersInChannel >= levelConfigFile.minVoiceMembers &&
          !isUserActive(newState)
        ) {
          console.log(
            `‚è∏Ô∏è ${newState.member?.user.tag} do≈ÇƒÖczy≈Ç ale jest wyciszony`
          );
        }
      }

      // ========== U≈ªYTKOWNIK OPU≈öCI≈Å KANA≈Å ==========
      else if (oldState.channel && !newState.channel) {
        const membersInOldChannel = oldState.channel.members.filter(
          (m) => !m.user.bot
        ).size;

        console.log(
          `üé§ ${newState.member?.user.tag} opu≈õci≈Ç VC (zosta≈Ço ${membersInOldChannel} os√≥b)`
        );

        const wasValid = membersInOldChannel >= levelConfigFile.minVoiceMembers;

        // Zako≈Ñcz sesjƒô dla wychodzƒÖcego u≈ºytkownika
        await xpManager.setVoiceLeft(userId, guildId, wasValid);
        console.log(
          `‚úÖ Zako≈Ñczono sesjƒô XP dla ${newState.member?.user.tag} (valid: ${wasValid})`
        );

        // Je≈õli spad≈Ço poni≈ºej minimum, zako≈Ñcz sesje dla wszystkich
        if (membersInOldChannel < levelConfigFile.minVoiceMembers) {
          console.log(
            `‚ö†Ô∏è Spadek poni≈ºej minimum (${membersInOldChannel}), ko≈Ñczƒô wszystkie sesje`
          );
          for (const [memberId, member] of oldState.channel.members) {
            if (!member.user.bot) {
              await xpManager.setVoiceLeft(memberId, guildId, true);
              console.log(
                `‚úÖ Zako≈Ñczono sesjƒô XP dla ${member.user.tag} (brak minimum)`
              );
            }
          }
        }
      }

      // ========== U≈ªYTKOWNIK PRZE≈ÅƒÑCZY≈Å SIƒò MIƒòDZY KANA≈ÅAMI ==========
      else if (
        oldState.channel &&
        newState.channel &&
        oldState.channel.id !== newState.channel.id
      ) {
        console.log(
          `üé§ ${newState.member?.user.tag} prze≈ÇƒÖczy≈Ç siƒô miƒôdzy kana≈Çami`
        );

        // Zako≈Ñcz sesjƒô na starym kanale
        const membersInOldChannel = oldState.channel.members.filter(
          (m) => !m.user.bot
        ).size;
        const wasOldValid =
          membersInOldChannel >= levelConfigFile.minVoiceMembers;

        await xpManager.setVoiceLeft(userId, guildId, wasOldValid);
        console.log(
          `‚úÖ Zako≈Ñczono sesjƒô na starym kanale (valid: ${wasOldValid})`
        );

        // Rozpocznij nowƒÖ sesjƒô na nowym kanale (je≈õli u≈ºytkownik aktywny)
        const membersInNewChannel = newState.channel.members.filter(
          (m) => !m.user.bot
        ).size;

        if (
          membersInNewChannel >= levelConfigFile.minVoiceMembers &&
          isUserActive(newState)
        ) {
          xpManager.setVoiceJoined(userId, guildId);
          console.log(`‚úÖ Rozpoczƒôto sesjƒô na nowym kanale`);

          // Je≈õli to druga osoba, aktywuj pierwszƒÖ
          if (membersInNewChannel === levelConfigFile.minVoiceMembers) {
            for (const [memberId, member] of newState.channel.members) {
              if (
                !member.user.bot &&
                memberId !== userId &&
                member.voice.channel
              ) {
                if (isUserActive(member.voice)) {
                  xpManager.setVoiceJoined(memberId, guildId);
                  console.log(
                    `‚úÖ Rozpoczƒôto sesjƒô XP dla ${member.user.tag} (aktywacja minimum)`
                  );
                }
              }
            }
          }
        }

        // Sprawd≈∫ czy na starym kanale nie spad≈Ço poni≈ºej minimum
        if (membersInOldChannel < levelConfigFile.minVoiceMembers) {
          for (const [memberId, member] of oldState.channel.members) {
            if (!member.user.bot) {
              await xpManager.setVoiceLeft(memberId, guildId, true);
              console.log(
                `‚úÖ Zako≈Ñczono sesjƒô XP dla ${member.user.tag} na starym kanale (brak minimum)`
              );
            }
          }
        }
      }

      // ========== ZMIANA STANU WYCISZENIA (MUTE/DEAFEN) ==========
      else if (
        oldState.channel &&
        newState.channel &&
        oldState.channel.id === newState.channel.id
      ) {
        const oldActive = isUserActive(oldState);
        const newActive = isUserActive(newState);

        // U≈ºytkownik siƒô wyciszy≈Ç/wy≈ÇƒÖczy≈Ç d≈∫wiƒôk
        if (oldActive && !newActive) {
          console.log(
            `üîá ${newState.member?.user.tag} wyciszy≈Ç siƒô/wy≈ÇƒÖczy≈Ç d≈∫wiƒôk`
          );

          const membersInChannel = newState.channel.members.filter(
            (m) => !m.user.bot
          ).size;
          const wasValid = membersInChannel >= levelConfigFile.minVoiceMembers;

          // Wstrzymaj liczenie XP (zapisz obecny czas)
          await xpManager.pauseVoiceSession(userId, guildId, wasValid);
          console.log(
            `‚è∏Ô∏è Wstrzymano sesjƒô XP dla ${newState.member?.user.tag}`
          );
        }

        // U≈ºytkownik siƒô odciszy≈Ç/w≈ÇƒÖczy≈Ç d≈∫wiƒôk
        else if (!oldActive && newActive) {
          console.log(
            `üîä ${newState.member?.user.tag} odciszy≈Ç siƒô/w≈ÇƒÖczy≈Ç d≈∫wiƒôk`
          );

          const membersInChannel = newState.channel.members.filter(
            (m) => !m.user.bot
          ).size;

          if (membersInChannel >= levelConfigFile.minVoiceMembers) {
            // Wzn√≥w liczenie XP
            xpManager.resumeVoiceSession(userId, guildId);
            console.log(
              `‚ñ∂Ô∏è Wznowiono sesjƒô XP dla ${newState.member?.user.tag}`
            );
          }
        }
      }
    } catch (error) {
      console.error("Error in voice state XP handler:", error);
    }
  },
};

export default event;
